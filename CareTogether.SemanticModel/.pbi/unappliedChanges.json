{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "Location",
      "lineageTag": "16a053ed-84f9-4826-879d-c70341fcdfb9",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    Locations_table = Source{[Name=\"Location\",Signature=\"table\"]}[Data],",
        "    #\"Renamed Columns\" = Table.RenameColumns(Locations_table,{{\"Name\", \"Location\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    Locations_table = Source{[Name=\\\"Location\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(Locations_table,{{\\\"Name\\\", \\\"Location\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Community",
      "lineageTag": "f38961a2-f1d1-478b-87f7-d848cfbf0304",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    Families_table = Source{[Name=\"Communities\",Signature=\"table\"]}[Data],",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(Families_table, \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\", \"OrganizationId\", \"Name\"}, {\"Location.Id\", \"Location.OrganizationId\", \"Location.Name\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Location\",{\"OrganizationId\", \"LocationId\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}}),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Renamed Columns\",{\"Location.OrganizationId\", \"Location.Name\"})",
        "in",
        "    #\"Removed Columns1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    Families_table = Source{[Name=\\\"Communities\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(Families_table,{\\\"Location\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"Name\\\", \\\"Community Name\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Role",
      "lineageTag": "960f9fe2-c3cc-4543-9ef9-5a2b70f1f590",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    Roles_table = Source{[Name=\"Role\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(Roles_table,{\"OrganizationId\"}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Removed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Organization\",{{\"Organization.Id\", \"OrganizationId\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    Roles_table = Source{[Name=\\\"Role\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(Roles_table,{{\\\"Name\\\", \\\"Role Name\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "OData Live",
      "lineageTag": "57209f9d-82f3-418c-a931-ceb80491aad8",
      "queryGroupId": "91ecdad7-24ac-4514-9813-a6b1f431692c",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    ApiHost = if Production then \"https://app.caretogether.io\" else \"http://localhost:5000\",",
        "    ApiUrl = ApiHost&\"/api/odata/live\",",
        "    Source = OData.Feed(ApiUrl, null, [Implementation=\"2.0\"])",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Production",
      "lineageTag": "af2a21ce-1ab4-401a-bbbd-b0f1d2c7c86f",
      "description": "Always leave this as \"TRUE\" to work with actual production data. \"FALSE\" is meant to be used by CareTogether developers for local debugging, and will not work when using the Power BI Service.",
      "navigationStepName": "Navigation",
      "text": [
        "true meta [IsParameterQuery=true, List={true, false}, DefaultValue=true, Type=\"Logical\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Logical",
      "isHidden": false
    },
    {
      "name": "Referral",
      "lineageTag": "d767a338-d9a5-4e00-8b61-2f6469d3aa63",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    Referral_table = Source{[Name=\"Referral\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(Referral_table,{\"Family\", \"OrganizationId\", \"LocationId\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"ReferralSource\", \"Referral Source\"}, {\"CloseReason\", \"Close Reason\"}}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Renamed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded Location\",{{\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}})",
        "in",
        "    #\"Renamed Columns1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    Referral_table = Source{[Name=\\\"Referral\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(Referral_table,{\\\"Family\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"ReferralSource\\\", \\\"Referral Source\\\"}, {\\\"CloseReason\\\", \\\"Close Reason\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Arrangement",
      "lineageTag": "46d5bd4a-a507-4eb7-941d-b7680ccdeaa3",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    Arrangement_table = Source{[Name=\"Arrangement\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(Arrangement_table,{\"Referral\", \"Person\", \"Type\", \"OrganizationId\", \"LocationId\"}),",
        "    #\"Calculated Local Time\" = Table.TransformColumns(#\"Removed Columns\",{{\"StartedUtc\", DateTimeZone.ToLocal, type datetimezone}, {\"EndedUtc\", DateTimeZone.ToLocal, type datetimezone}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Calculated Local Time\",{{\"StartedUtc\", \"Started\"}, {\"EndedUtc\", \"Ended\"}}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Renamed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded Location\",{{\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}})",
        "in",
        "    #\"Renamed Columns1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    Arrangement_table = Source{[Name=\\\"Arrangement\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(Arrangement_table,{\\\"Referral\\\", \\\"Person\\\"}),\\n    #\\\"Calculated Local Time\\\" = Table.TransformColumns(#\\\"Removed Columns\\\",{{\\\"StartedUtc\\\", DateTimeZone.ToLocal, type datetimezone}, {\\\"EndedUtc\\\", DateTimeZone.ToLocal, type datetimezone}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Calculated Local Time\\\",{{\\\"StartedUtc\\\", \\\"Started\\\"}, {\\\"EndedUtc\\\", \\\"Ended\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Arrangement Type",
      "lineageTag": "c7cb613d-9d95-4212-99b0-afeb17ed7411",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    ArrangementType_table1 = Source{[Name=\"ArrangementType\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(ArrangementType_table1,{\"OrganizationId\", \"LocationId\"}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Removed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Location\",{{\"Type\", \"Arrangement Type\"}, {\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    ArrangementType_table1 = Source{[Name=\\\"ArrangementType\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(ArrangementType_table1,{{\\\"Type\\\", \\\"Arrangement Type\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Child Location Record",
      "lineageTag": "97d0ba37-acfb-4f78-bc62-fb59df0fb93e",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    ChildLocationRecords_table1 = Source{[Name=\"ChildLocationRecords\",Signature=\"table\"]}[Data],",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(ChildLocationRecords_table1, \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Location\",{\"Arrangement\", \"Child\", \"Family\", \"OrganizationId\", \"LocationId\"}),",
        "    #\"Calculated Local Time\" = Table.TransformColumns(#\"Removed Columns\",{{\"StartedAtUtc\", DateTimeZone.ToLocal, type datetimezone}, {\"EndedAtUtc\", DateTimeZone.ToLocal, type datetimezone}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Calculated Local Time\",{{\"StartedAtUtc\", \"Started\"}, {\"EndedAtUtc\", \"Ended\"}, {\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}}),",
        "    #\"Added Index\" = Table.AddIndexColumn(#\"Renamed Columns\", \"Index\", 1, 1, Int64.Type),",
        "    // Adding the family Name: ",
        "    Families = Table.SelectColumns(Source{[Name=\"Family\",Signature=\"table\"]}[Data], {\"Id\", \"Name\"}),",
        "",
        "    // Merged tables: ",
        "    Merge = Table.RenameColumns(Table.SelectColumns(Table.Join(",
        "        #\"Added Index\",",
        "        \"FamilyId\",",
        "        Families,",
        "        \"Id\",",
        "        JoinKind.LeftOuter",
        "    ),{\"ArrangementId\", \"ChildPersonId\", \"FamilyId\", \"Started\", \"ChildcarePlan\", \"Ended\", \"Duration\", \"Index\", \"Name\", \"OrganizationId\", \"LocationId\"}), ",
        "    {{\"Name\", \"Childcare Family Name\"}})",
        "in",
        "    Merge"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    ChildLocationRecords_table1 = Source{[Name=\\\"ChildLocationRecords\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(ChildLocationRecords_table1,{\\\"Arrangement\\\", \\\"Child\\\", \\\"Family\\\"}),\\n    #\\\"Calculated Local Time\\\" = Table.TransformColumns(#\\\"Removed Columns\\\",{{\\\"StartedAtUtc\\\", DateTimeZone.ToLocal, type datetimezone}, {\\\"EndedAtUtc\\\", DateTimeZone.ToLocal, type datetimezone}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Calculated Local Time\\\",{{\\\"StartedAtUtc\\\", \\\"Started\\\"}, {\\\"EndedAtUtc\\\", \\\"Ended\\\"}}),\\n    #\\\"Added Index\\\" = Table.AddIndexColumn(#\\\"Renamed Columns\\\", \\\"Index\\\", 1, 1, Int64.Type),\\n\\n    // Adding the family Name: \\n    Families = Table.SelectColumns(Source{[Name=\\\"Family\\\",Signature=\\\"table\\\"]}[Data], {\\\"Id\\\", \\\"Name\\\"}),\\n\\n    // Merged tables: \\n    Merge = Table.RenameColumns(Table.SelectColumns(Table.Join(\\n        #\\\"Added Index\\\",\\n        \\\"FamilyId\\\",\\n        Families,\\n        \\\"Id\\\",\\n        JoinKind.LeftOuter\\n    ),{\\\"ArrangementId\\\", \\\"ChildPersonId\\\", \\\"FamilyId\\\", \\\"Started\\\", \\\"ChildcarePlan\\\", \\\"Ended\\\", \\\"Duration\\\", \\\"Index\\\", \\\"Name\\\"}), \\n    {{\\\"Name\\\", \\\"Childcare Family Name\\\"}})\\nin\\n    Merge\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Approval Status",
      "lineageTag": "5d13b768-cd22-4e23-8052-f51c41e023ce",
      "queryGroupId": "594168a4-5350-4226-a9bb-22618ac5839d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCijKLy5ITS7JLEtV0lEyAGJkkVidaCXXioLMotQUoIwhEMN4IBnHgoKi/DKwlBEQw7kgOf+8pPzEohSwpDEQI/ggWc+8RJiVJkAM54LkXFLzMsHaTIEYyomNBQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [RoleApprovalStatus = _t, Order = _t, Status = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"RoleApprovalStatus\", type text}, {\"Order\", Int64.Type}, {\"Status\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WCijKLy5ITS7JLEtV0lEyAGJkkVidaCXXioLMotQUoIwhEMN4IBnHgoKi/DKwlBEQw7kgOf+8pPzEohSwpDEQI/ggWc+8RJiVJkAM54LkXFLzMsHaTIEYyomNBQA=\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [RoleApprovalStatus = _t, Order = _t, Status = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"RoleApprovalStatus\\\", type text}, {\\\"Order\\\", Int64.Type}, {\\\"Status\\\", type text}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Close Reason",
      "lineageTag": "bbdc1bb2-de24-4f53-a35b-5004cd067f7e",
      "queryGroupId": "594168a4-5350-4226-a9bb-22618ac5839d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"Tcw9DoAgDIbhqzTMDP5dwLgqgythINAYFiGIg7e3gFGHDt+bJ5WSCZ/GEKIP0emEjLOGjiL8q+IZTjpo49JFoC0I3lLB7PcNo0C0aAl0FdUKT85yxcOf0RTU0327/CG4YKI+5Ae0IE+lbg==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ReferralCloseReason = _t, Order = _t, Reason = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ReferralCloseReason\", type text}, {\"Order\", Int64.Type}, {\"Reason\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"Tcw9DoAgDIbhqzTMDP5dwLgqgythINAYFiGIg7e3gFGHDt+bJ5WSCZ/GEKIP0emEjLOGjiL8q+IZTjpo49JFoC0I3lLB7PcNo0C0aAl0FdUKT85yxcOf0RTU0327/CG4YKI+5Ae0IE+lbg==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ReferralCloseReason = _t, Order = _t, Reason = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"ReferralCloseReason\\\", type text}, {\\\"Order\\\", Int64.Type}, {\\\"Reason\\\", type text}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Arrangement Phase",
      "lineageTag": "8a45b6de-6ddf-451f-885a-53d149374a7d",
      "queryGroupId": "594168a4-5350-4226-a9bb-22618ac5839d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCk4tKcnMSw8tUNJRMgBiKF8BKBCrE60UlJqYUhmSH1ySWFQClDUEYrCQQkm+AkQQpArMSk0BShqBjIDyQDKueSlgcWMghrBBos6JecmpOTlgGRMgRvBjYwE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ArrangementPhase = _t, Order = _t, Phase = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ArrangementPhase\", type text}, {\"Order\", Int64.Type}, {\"Phase\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WCk4tKcnMSw8tUNJRMgBiKF8BKBCrE60UlJqYUhmSH1ySWFQClDUEYrCQQkm+AkQQpArMSk0BShqBjIDyQDKueSlgcWMghrBBos6JecmpOTlgGRMgRvBjYwE=\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ArrangementPhase = _t, Order = _t, Phase = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"ArrangementPhase\\\", type text}, {\\\"Order\\\", Int64.Type}, {\\\"Phase\\\", type text}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Childcare",
      "lineageTag": "ca6cccb8-8c47-4b47-a6a3-3730e2269767",
      "queryGroupId": "594168a4-5350-4226-a9bb-22618ac5839d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wcs7IzEnxyC8tzsxLV9JRMgBisJACTCxWJ1rJJbGyJDM3FSzhnFiU6p+XUwlUaAjEUCkFsFwyUE4BLAnS5ZcPFvTMK8vPKUvNTc0rAao3AmK/fIhyBWSp2FgA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ChildInvolvement = _t, Order = _t, Involvement = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ChildInvolvement\", type text}, {\"Order\", Int64.Type}, {\"Involvement\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Involvement\", \"Care Type\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45Wcs7IzEnxyC8tzsxLV9JRMgBisJACTCxWJ1rJJbGyJDM3FSzhnFiU6p+XUwlUaAjEUCkFsFwyUE4BLAnS5ZcPFvTMK8vPKUvNTc0rAao3AmK/fIhyBWSp2FgA\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ChildInvolvement = _t, Order = _t, Involvement = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"ChildInvolvement\\\", type text}, {\\\"Order\\\", Int64.Type}, {\\\"Involvement\\\", type text}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"Involvement\\\", \\\"Care Type\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Childcare Plan",
      "lineageTag": "e454f50c-d108-4cc7-b49d-4585c9ad868e",
      "queryGroupId": "594168a4-5350-4226-a9bb-22618ac5839d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8i9LLcrLTM8o8cgvLc7MS1fSUTIAYriwAkw8VidaySWxsiQzN9U5IzMnxTmxKBWo0BCIocIKYPFkkDhIcXhmSUYAkJNXAlRiBMQgAQWoSGwsAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ChildLocationPlan = _t, Order = _t, Plan = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ChildLocationPlan\", type text}, {\"Order\", Int64.Type}, {\"Plan\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45W8i9LLcrLTM8o8cgvLc7MS1fSUTIAYriwAkw8VidaySWxsiQzN9U5IzMnxTmxKBWo0BCIocIKYPFkkDhIcXhmSUYAkJNXAlRiBMQgAQWoSGwsAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ChildLocationPlan = _t, Order = _t, Plan = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"ChildLocationPlan\\\", type text}, {\\\"Order\\\", Int64.Type}, {\\\"Plan\\\", type text}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Date",
      "lineageTag": "c3cfcb9b-c6b2-48e0-8d00-9fe6ec85a978",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Today = Date.From( DateTime.LocalNow() ),",
        "    StartDate = #date(2021, 1, 1),",
        "    EndDate = Date.EndOfYear( Date.AddYears(Today, 1) ),",
        "    #\"List of Dates\" = List.Dates( StartDate, Duration.Days( EndDate - StartDate ) +1, #duration( 1, 0, 0, 0 ) ),",
        "    #\"Converted to Table\" = Table.FromList( #\"List of Dates\", Splitter.SplitByNothing(), type table[Date = Date.Type] ),",
        "    #\"Insert Date Integer\" = Table.AddColumn(#\"Converted to Table\", \"Date Integer\", each Number.From( Date.ToText( [Date], \"yyyyMMdd\" ) ), Int64.Type ),",
        "    #\"Insert Year\" = Table.AddColumn(#\"Insert Date Integer\", \"Year\", each Date.Year([Date]), Int64.Type),",
        "    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the Current period.",
        "    #\"Add Year Default\" = Table.AddColumn(#\"Insert Year\", \"Year Default\", each if Date.Year( Today ) = [Year] then \"Current\" else Text.From( [Year] ), type text),",
        "    #\"Insert YYYY-MM\" = Table.AddColumn(#\"Add Year Default\", \"YYYY-MM\", each Date.ToText( [Date], \"yyyy-MM\"), type text),",
        "    #\"Insert YYYY-MM-dd\" = Table.AddColumn(#\"Insert YYYY-MM\", \"YYYY-MM-dd\", each Date.ToText( [Date], \"yyyy-MM-dd\"), type text),",
        "    #\"Insert Month-Year\" = Table.AddColumn(#\"Insert YYYY-MM-dd\", \"Month-Year\", each Date.ToText( [Date], \"MMM yyyy\"), type text),",
        "    #\"Insert Month Number\" = Table.AddColumn(#\"Insert Month-Year\", \"Month Of Year\", each Date.Month([Date]), Int64.Type),",
        "    #\"Insert Month Name\" = Table.AddColumn(#\"Insert Month Number\", \"Month Name\", each Date.MonthName([Date], \"EN-us\"), type text),",
        "    #\"Insert Month Name Short\" = Table.AddColumn(#\"Insert Month Name\", \"Month Name Short\", each Date.ToText( [Date] , \"MMM\", \"EN-us\" ), type text),",
        "    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the current period.",
        "    #\"Add Month Name Default\" = Table.AddColumn(#\"Insert Month Name Short\", \"Month Name Default\", each if Date.Month( Today ) = [Month Of Year] then \"Current\" else [Month Name], type text ),",
        "    #\"Insert Start of Month\" = Table.AddColumn(#\"Add Month Name Default\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
        "    #\"Insert End of Month\" = Table.AddColumn(#\"Insert Start of Month\", \"End of Month\", each Date.EndOfMonth( [Date] ), type date),",
        "    #\"Insert Days in Month\" = Table.AddColumn(#\"Insert End of Month\", \"Days in Month\", each Date.DaysInMonth([Date]), Int64.Type),",
        "//    #\"Add ISO Week\" = Table.AddColumn(#\"Insert Days in Month\", \"ISO Weeknumber\", each let",
        "//        CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),",
        "//        YearCurrThursday = Date.Year( CurrentThursday ),",
        "//        FirstThursdayOfYear = Date.AddDays(#date( YearCurrThursday,1,7),- Date.DayOfWeek(#date(YearCurrThursday,1,1), Day.Friday) ),",
        "//        ISO_Week = Duration.Days( CurrentThursday - FirstThursdayOfYear) / 7 + 1",
        "//        in ISO_Week, Int64.Type ),",
        "//    #\"Add ISO Year\" = Table.AddColumn(#\"Add ISO Week\", \"ISO Year\", each let",
        "//        CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),",
        "//        YearCurrThursday = Date.Year( CurrentThursday )",
        "//        in YearCurrThursday, Int64.Type ),",
        "//    #\"Insert Start of Week\" = Table.AddColumn(#\"Add ISO Year\", \"Start of Week\", each Date.StartOfWeek([Date], Day.Monday ), type date),",
        "//    #\"Insert Quarter Number\" = Table.AddColumn(#\"Insert Start of Week\", \"Quarter Number\", each Date.QuarterOfYear([Date]), Int64.Type),",
        "//    #\"Added Quarter\" = Table.AddColumn(#\"Insert Quarter Number\", \"Quarter\", each \"Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
        "//    #\"Add Year-Quarter\" = Table.AddColumn(#\"Added Quarter\", \"Year-Quarter\", each Text.From( Date.Year([Date]) ) & \"-Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
        "    #\"Insert Day Name\" = Table.AddColumn(#\"Insert Days in Month\", \"Day Name\", each Date.DayOfWeekName([Date], \"EN-us\" ), type text),",
        "    #\"Insert Day Name Short\" = Table.AddColumn( #\"Insert Day Name\", \"Day Name Short\", each Date.ToText( [Date], \"ddd\", \"EN-us\" ), type text),",
        "    #\"Insert Day of Month Number\" = Table.AddColumn(#\"Insert Day Name Short\", \"Day of Month Number\", each Date.Day([Date]), Int64.Type),",
        "    #\"Insert Day of Week\" = Table.AddColumn(#\"Insert Day of Month Number\", \"Day of Week Number\", each Date.DayOfWeek([Date]), Int64.Type),",
        "    #\"Insert Day of Year\" = Table.AddColumn(#\"Insert Day of Week\", \"Day of Year Number\", each Date.DayOfYear([Date]), Int64.Type)",
        "//    #\"Add Day Offset\" = Table.AddColumn(#\"Insert Day of Year\", \"Day Offset\", each Number.From( Date.From( Today ) - [Date] ) , Int64.Type ),",
        "//    #\"Add Week Offset\" = Table.AddColumn(#\"Add Day Offset\", \"Week Offset\", each ( Number.From( Date.StartOfWeek( [Date], Day.Monday) )- Number.From( Date.StartOfWeek( Today, Day.Monday ) ) ) / 7, Int64.Type ),",
        "//    #\"Add Month Offset\" = Table.AddColumn(#\"Add Week Offset\", \"Month Offset\", each ([Year] - Date.Year( Today ) ) *12 + ( [Month Of Year] - Date.Month( Today ) ), Int64.Type ),",
        "//    #\"Add Quarter Offset\" = Table.AddColumn(#\"Add Month Offset\", \"Quarter Offset\", each ( [Year] - Date.Year(Today) ) * 4 + Date.QuarterOfYear( [Date] ) - Date.QuarterOfYear( Today ), Int64.Type ),",
        "//    #\"Add Year Offset\" = Table.AddColumn(#\"Add Quarter Offset\", \"Year Offset\", each [Year] - Date.Year(Today), Int64.Type ),",
        "//    #\"Insert Is Weekend\" = Table.AddColumn(#\"Add Year Offset\", \"Is Weekend\", each if Date.DayOfWeek([Date]) >= 5 then 1 else 0, Int64.Type ),",
        "//    #\"Insert Is Weekday\" = Table.AddColumn(#\"Insert Is Weekend\", \"Is Weekday\", each if Date.DayOfWeek([Date]) < 5  then 1 else 0, Int64.Type )",
        "in",
        "    #\"Insert Day of Week\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Today = Date.From( DateTime.LocalNow() ),\\n    StartDate = #date(2021, 1, 1),\\n    EndDate = Date.EndOfYear( Date.AddYears(Today, 1) ),\\n    #\\\"List of Dates\\\" = List.Dates( StartDate, Duration.Days( EndDate - StartDate ) +1, #duration( 1, 0, 0, 0 ) ),\\n    #\\\"Converted to Table\\\" = Table.FromList( #\\\"List of Dates\\\", Splitter.SplitByNothing(), type table[Date = Date.Type] ),\\n    #\\\"Insert Date Integer\\\" = Table.AddColumn(#\\\"Converted to Table\\\", \\\"Date Integer\\\", each Number.From( Date.ToText( [Date], \\\"yyyyMMdd\\\" ) ), Int64.Type ),\\n    #\\\"Insert Year\\\" = Table.AddColumn(#\\\"Insert Date Integer\\\", \\\"Year\\\", each Date.Year([Date]), Int64.Type),\\n    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the Current period.\\n    #\\\"Add Year Default\\\" = Table.AddColumn(#\\\"Insert Year\\\", \\\"Year Default\\\", each if Date.Year( Today ) = [Year] then \\\"Current\\\" else Text.From( [Year] ), type text),\\n    #\\\"Insert YYYY-MM\\\" = Table.AddColumn(#\\\"Add Year Default\\\", \\\"YYYY-MM\\\", each Date.ToText( [Date], \\\"yyyy-MM\\\"), type text),\\n    #\\\"Insert YYYY-MM-dd\\\" = Table.AddColumn(#\\\"Insert YYYY-MM\\\", \\\"YYYY-MM-dd\\\", each Date.ToText( [Date], \\\"yyyy-MM-dd\\\"), type text),\\n    #\\\"Insert Month-Year\\\" = Table.AddColumn(#\\\"Insert YYYY-MM-dd\\\", \\\"Month-Year\\\", each Date.ToText( [Date], \\\"MMM yyyy\\\"), type text),\\n    #\\\"Insert Month Number\\\" = Table.AddColumn(#\\\"Insert Month-Year\\\", \\\"Month Of Year\\\", each Date.Month([Date]), Int64.Type),\\n    #\\\"Insert Month Name\\\" = Table.AddColumn(#\\\"Insert Month Number\\\", \\\"Month Name\\\", each Date.MonthName([Date], \\\"EN-us\\\"), type text),\\n    #\\\"Insert Month Name Short\\\" = Table.AddColumn(#\\\"Insert Month Name\\\", \\\"Month Name Short\\\", each Date.ToText( [Date] , \\\"MMM\\\", \\\"EN-us\\\" ), type text),\\n    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the current period.\\n    #\\\"Add Month Name Default\\\" = Table.AddColumn(#\\\"Insert Month Name Short\\\", \\\"Month Name Default\\\", each if Date.Month( Today ) = [Month Of Year] then \\\"Current\\\" else [Month Name], type text ),\\n    #\\\"Insert Start of Month\\\" = Table.AddColumn(#\\\"Add Month Name Default\\\", \\\"Start of Month\\\", each Date.StartOfMonth([Date]), type date),\\n    #\\\"Insert End of Month\\\" = Table.AddColumn(#\\\"Insert Start of Month\\\", \\\"End of Month\\\", each Date.EndOfMonth( [Date] ), type date),\\n    #\\\"Insert Days in Month\\\" = Table.AddColumn(#\\\"Insert End of Month\\\", \\\"Days in Month\\\", each Date.DaysInMonth([Date]), Int64.Type),\\n//    #\\\"Add ISO Week\\\" = Table.AddColumn(#\\\"Insert Days in Month\\\", \\\"ISO Weeknumber\\\", each let\\n//        CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),\\n//        YearCurrThursday = Date.Year( CurrentThursday ),\\n//        FirstThursdayOfYear = Date.AddDays(#date( YearCurrThursday,1,7),- Date.DayOfWeek(#date(YearCurrThursday,1,1), Day.Friday) ),\\n//        ISO_Week = Duration.Days( CurrentThursday - FirstThursdayOfYear) / 7 + 1\\n//        in ISO_Week, Int64.Type ),\\n//    #\\\"Add ISO Year\\\" = Table.AddColumn(#\\\"Add ISO Week\\\", \\\"ISO Year\\\", each let\\n//        CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),\\n//        YearCurrThursday = Date.Year( CurrentThursday )\\n//        in YearCurrThursday, Int64.Type ),\\n//    #\\\"Insert Start of Week\\\" = Table.AddColumn(#\\\"Add ISO Year\\\", \\\"Start of Week\\\", each Date.StartOfWeek([Date], Day.Monday ), type date),\\n//    #\\\"Insert Quarter Number\\\" = Table.AddColumn(#\\\"Insert Start of Week\\\", \\\"Quarter Number\\\", each Date.QuarterOfYear([Date]), Int64.Type),\\n//    #\\\"Added Quarter\\\" = Table.AddColumn(#\\\"Insert Quarter Number\\\", \\\"Quarter\\\", each \\\"Q\\\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),\\n//    #\\\"Add Year-Quarter\\\" = Table.AddColumn(#\\\"Added Quarter\\\", \\\"Year-Quarter\\\", each Text.From( Date.Year([Date]) ) & \\\"-Q\\\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),\\n    #\\\"Insert Day Name\\\" = Table.AddColumn(#\\\"Insert Days in Month\\\", \\\"Day Name\\\", each Date.DayOfWeekName([Date], \\\"EN-us\\\" ), type text),\\n    #\\\"Insert Day Name Short\\\" = Table.AddColumn( #\\\"Insert Day Name\\\", \\\"Day Name Short\\\", each Date.ToText( [Date], \\\"ddd\\\", \\\"EN-us\\\" ), type text),\\n    #\\\"Insert Day of Month Number\\\" = Table.AddColumn(#\\\"Insert Day Name Short\\\", \\\"Day of Month Number\\\", each Date.Day([Date]), Int64.Type),\\n    #\\\"Insert Day of Week\\\" = Table.AddColumn(#\\\"Insert Day of Month Number\\\", \\\"Day of Week Number\\\", each Date.DayOfWeek([Date]), Int64.Type),\\n    #\\\"Insert Day of Year\\\" = Table.AddColumn(#\\\"Insert Day of Week\\\", \\\"Day of Year Number\\\", each Date.DayOfYear([Date]), Int64.Type)\\n//    #\\\"Add Day Offset\\\" = Table.AddColumn(#\\\"Insert Day of Year\\\", \\\"Day Offset\\\", each Number.From( Date.From( Today ) - [Date] ) , Int64.Type ),\\n//    #\\\"Add Week Offset\\\" = Table.AddColumn(#\\\"Add Day Offset\\\", \\\"Week Offset\\\", each ( Number.From( Date.StartOfWeek( [Date], Day.Monday) )- Number.From( Date.StartOfWeek( Today, Day.Monday ) ) ) / 7, Int64.Type ),\\n//    #\\\"Add Month Offset\\\" = Table.AddColumn(#\\\"Add Week Offset\\\", \\\"Month Offset\\\", each ([Year] - Date.Year( Today ) ) *12 + ( [Month Of Year] - Date.Month( Today ) ), Int64.Type ),\\n//    #\\\"Add Quarter Offset\\\" = Table.AddColumn(#\\\"Add Month Offset\\\", \\\"Quarter Offset\\\", each ( [Year] - Date.Year(Today) ) * 4 + Date.QuarterOfYear( [Date] ) - Date.QuarterOfYear( Today ), Int64.Type ),\\n//    #\\\"Add Year Offset\\\" = Table.AddColumn(#\\\"Add Quarter Offset\\\", \\\"Year Offset\\\", each [Year] - Date.Year(Today), Int64.Type ),\\n//    #\\\"Insert Is Weekend\\\" = Table.AddColumn(#\\\"Add Year Offset\\\", \\\"Is Weekend\\\", each if Date.DayOfWeek([Date]) >= 5 then 1 else 0, Int64.Type ),\\n//    #\\\"Insert Is Weekday\\\" = Table.AddColumn(#\\\"Insert Is Weekend\\\", \\\"Is Weekday\\\", each if Date.DayOfWeek([Date]) < 5  then 1 else 0, Int64.Type )\\nin\\n    #\\\"Insert Day of Week\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "_Measures",
      "lineageTag": "421e7506-d8f7-4e44-b8d9-64dd3a01d54c",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Community Member Families",
      "lineageTag": "614cb360-e6aa-4352-801e-f51065f1076b",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    ApiHost = if Production then \"https://app.caretogether.io\" else \"http://localhost:5000\",",
        "    ApiUrl = ApiHost&\"/api/odata/live\",",
        "    Source = OData.Feed(ApiUrl, null, [Implementation=\"2.0\"]),",
        "    CommunityMemberFamilies_table1 = Source{[Name=\"CommunityMemberFamilies\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(CommunityMemberFamilies_table1,{\"Community\", \"Family\", \"OrganizationId\", \"LocationId\"}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Removed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Location\",{{\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    ApiHost = if Production then \\\"https://app.caretogether.io\\\" else \\\"http://localhost:5000\\\",\\n    ApiUrl = ApiHost&\\\"/api/odata/live\\\",\\n    Source = OData.Feed(ApiUrl, null, [Implementation=\\\"2.0\\\"]),\\n    CommunityMemberFamilies_table1 = Source{[Name=\\\"CommunityMemberFamilies\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(CommunityMemberFamilies_table1,{\\\"Community\\\", \\\"Family\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Community Role Assignments",
      "lineageTag": "5d48d610-1f9d-4a9e-bae4-ef9ac4fec4a1",
      "queryGroupId": "4827ea4a-5fde-444b-8047-a978c092e918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    ApiHost = if Production then \"https://app.caretogether.io\" else \"http://localhost:5000\",",
        "    ApiUrl = ApiHost&\"/api/odata/live\",",
        "    Source = OData.Feed(ApiUrl, null, [Implementation=\"2.0\"]),",
        "    CommunityRoleAssignments_table1 = Source{[Name=\"CommunityRoleAssignments\",Signature=\"table\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(CommunityRoleAssignments_table1,{\"Community\", \"Person\", \"OrganizationId\", \"LocationId\"}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(#\"Removed Columns\", \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Location\",{{\"Organization.Id\", \"OrganizationId\"}, {\"Location.Id\", \"LocationId\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    ApiHost = if Production then \\\"https://app.caretogether.io\\\" else \\\"http://localhost:5000\\\",\\n    ApiUrl = ApiHost&\\\"/api/odata/live\\\",\\n    Source = OData.Feed(ApiUrl, null, [Implementation=\\\"2.0\\\"]),\\n    CommunityRoleAssignments_table1 = Source{[Name=\\\"CommunityRoleAssignments\\\",Signature=\\\"table\\\"]}[Data],\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(CommunityRoleAssignments_table1,{\\\"Community\\\", \\\"Person\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Function Assignments",
      "lineageTag": "37dbfcb3-ae81-4dbe-b5b6-66fa9cff03bd",
      "queryGroupId": "84f1b5fb-86e6-40ce-a936-518ae17cf818",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "",
        "    // Family Function Assignments",
        "    Families = Table.SelectColumns(Source{[Name=\"FamilyFunctionAssignments\", Signature=\"table\"]}[Data], {\"ArrangementId\", \"FamilyId\", \"Function\", \"Organization\", \"Location\"}),",
        "    #\"Expanded Organization\" = Table.ExpandRecordColumn(Families, \"Organization\", {\"Id\"}, {\"Organization.Id\"}),",
        "    #\"Expanded Location\" = Table.ExpandRecordColumn(#\"Expanded Organization\", \"Location\", {\"Id\"}, {\"Location.Id\"}),",
        "    FamiliesEntityId = Table.RenameColumns(Table.RenameColumns(#\"Expanded Location\", {{\"FamilyId\", \"EntityId\"}}), {{\"Location.Id\", \"LocationId\"}, {\"Organization.Id\", \"OrganizationId\"}})  ,",
        "    FamiliesEntityType = Table.AddColumn(FamiliesEntityId, \"EntityType\", each \"Family\"),",
        "",
        "    // Individual Function Assigments",
        "    Individuals = Table.SelectColumns(Source{[Name=\"IndividualFunctionAssignments\", Signature=\"table\"]}[Data], {\"ArrangementId\", \"PersonId\", \"Function\"}),",
        "    IndividualsEntityId = Table.RenameColumns(Individuals, {{\"PersonId\", \"EntityId\"}}),",
        "    IndividualsEntityType = Table.AddColumn(IndividualsEntityId, \"EntityType\", each \"Person\"),",
        "",
        "    //Merged Dataset: ",
        "    CombinedTables = Table.Combine({FamiliesEntityType, IndividualsEntityType})",
        "in",
        "    CombinedTables"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n\\n    // Family Function Assignments\\n    Families = Table.SelectColumns(Source{[Name=\\\"FamilyFunctionAssignments\\\", Signature=\\\"table\\\"]}[Data], {\\\"ArrangementId\\\", \\\"FamilyId\\\", \\\"Function\\\"}),\\n    FamiliesEntityId = Table.RenameColumns(Families, {{\\\"FamilyId\\\", \\\"EntityId\\\"}}),\\n    FamiliesEntityType = Table.AddColumn(FamiliesEntityId, \\\"EntityType\\\", each \\\"Family\\\"),\\n\\n    // Individual Function Assigments\\n    Individuals = Table.SelectColumns(Source{[Name=\\\"IndividualFunctionAssignments\\\", Signature=\\\"table\\\"]}[Data], {\\\"ArrangementId\\\", \\\"PersonId\\\", \\\"Function\\\"}),\\n    IndividualsEntityId = Table.RenameColumns(Individuals, {{\\\"PersonId\\\", \\\"EntityId\\\"}}),\\n    IndividualsEntityType = Table.AddColumn(IndividualsEntityId, \\\"EntityType\\\", each \\\"Person\\\"),\\n\\n    //Merged Dataset: \\n    CombinedTables = Table.Combine({FamiliesEntityType, IndividualsEntityType})\\nin\\n    CombinedTables\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Entity",
      "lineageTag": "18ba4465-a9c2-415f-8e79-fd884584fded",
      "queryGroupId": "84f1b5fb-86e6-40ce-a936-518ae17cf818",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "",
        "    //Person Table:",
        "    PersonTable = Table.ExpandRecordColumn(",
        "        Table.ExpandRecordColumn(",
        "            Table.SelectColumns(",
        "                Source{[Name=\"Person\", Signature=\"table\"]}[Data],",
        "                {\"Id\", \"FamilyId\", \"FirstName\", \"LastName\", \"Ethnicity\", \"DateOfBirth\", \"PersonType\",\"Organization\", \"Location\"}",
        "            ),",
        "            \"Organization\", {\"Id\"}, {\"OrganizationId\"}",
        "        ), \"Location\", {\"Id\"}, {\"LocationId\"}",
        "    ),",
        "",
        "    PersonRenamed = Table.RenameColumns(",
        "        PersonTable,",
        "        {\"Id\",\"PersonId\"}",
        "    ),",
        "",
        "    // Family Table: ",
        "    FamilyTable = Table.ExpandRecordColumn(",
        "        Table.SelectColumns(",
        "            Source{[Name=\"Family\", Signature=\"table\"]}[Data],",
        "            {\"Id\", \"Name\", \"PrimaryEmail\", \"PrimaryPhoneNumber\", \"PrimaryAddress\", \"HomeChurch\"}",
        "        ),",
        "        \"PrimaryAddress\", {\"Line1\", \"Line2\", \"City\", \"County\", \"State\", \"PostalCode\"}",
        "    ),",
        "",
        "    //Combined Tables: ",
        "    CombinedTables = Table.Join(",
        "        PersonRenamed,",
        "        {\"FamilyId\"},",
        "        FamilyTable,",
        "        {\"Id\"},",
        "        JoinKind.LeftOuter",
        "    ),",
        "",
        "    #\"Reordered Columns\" = Table.ReorderColumns(CombinedTables,{\"FamilyId\", \"Id\", \"LocationId\", \"Name\", \"PrimaryEmail\", \"PrimaryPhoneNumber\", \"Line1\", \"Line2\", \"City\", \"County\", \"State\", \"PostalCode\", \"HomeChurch\", \"PersonId\", \"FirstName\", \"LastName\", \"Ethnicity\", \"DateOfBirth\", \"PersonType\"}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Reordered Columns\",{\"Id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"Name\", \"Family Name\"}, {\"PrimaryEmail\", \"Email\"}, {\"PrimaryPhoneNumber\", \"Phone Number\"}, {\"Line1\", \"Address Line 1\"}, {\"Line2\", \"Address Line 2\"}, {\"FirstName\", \"First Name\"}, {\"LastName\", \"Last Name\"}}),",
        "    #\"Inserted Merged Column\" = Table.AddColumn(#\"Renamed Columns\", \"Full Name\", each Text.Combine({[First Name], [Last Name]}, \" \"), type text)",
        "in",
        "    #\"Inserted Merged Column\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let \\n    Source = #\\\"OData Live\\\",\\n    Person = Table.SelectColumns(\\n        Source{[Name=\\\"Person\\\", Signature=\\\"table\\\"]}[Data],\\n        {\\\"Id\\\", \\\"FamilyId\\\", \\\"FirstName\\\", \\\"LastName\\\", \\\"Ethnicity\\\", \\\"DateOfBirth\\\", \\\"PersonType\\\"}\\n        ),\\n\\n    PersonTableColumnsRenamed = Table.RenameColumns(Person, {{\\\"Id\\\",\\\"PersonId\\\"}}),\\n\\n    FamilyTable = Source{[Name=\\\"Family\\\", Signature=\\\"table\\\"]}[Data],\\n    FamilyTableColumns = Table.SelectColumns(FamilyTable, {\\\"Id\\\", \\\"LocationId\\\", \\\"Name\\\", \\\"PrimaryEmail\\\", \\\"PrimaryPhoneNumber\\\", \\\"PrimaryAddress\\\", \\\"HomeChurch\\\"}),\\n    FamilytableColumnsExpanded = Table.ExpandRecordColumn(FamilyTableColumns, \\\"PrimaryAddress\\\", {\\\"Line1\\\", \\\"Line2\\\", \\\"City\\\", \\\"County\\\", \\\"State\\\", \\\"PostalCode\\\"}),\\n\\n    CombinedTables = Table.Join(\\n        PersonTableColumnsRenamed,\\n        {\\\"FamilyId\\\"},\\n        FamilytableColumnsExpanded,\\n        {\\\"Id\\\"},\\n        JoinKind.LeftOuter\\n    ),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(CombinedTables,{\\\"FamilyId\\\", \\\"Id\\\", \\\"LocationId\\\", \\\"Name\\\", \\\"PrimaryEmail\\\", \\\"PrimaryPhoneNumber\\\", \\\"Line1\\\", \\\"Line2\\\", \\\"City\\\", \\\"County\\\", \\\"State\\\", \\\"PostalCode\\\", \\\"HomeChurch\\\", \\\"PersonId\\\", \\\"FirstName\\\", \\\"LastName\\\", \\\"Ethnicity\\\", \\\"DateOfBirth\\\", \\\"PersonType\\\"}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Reordered Columns\\\",{\\\"Id\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"Name\\\", \\\"Family Name\\\"}, {\\\"PrimaryEmail\\\", \\\"Email\\\"}, {\\\"PrimaryPhoneNumber\\\", \\\"Phone Number\\\"}, {\\\"Line1\\\", \\\"Address Line 1\\\"}, {\\\"Line2\\\", \\\"Address Line 2\\\"}, {\\\"FirstName\\\", \\\"First Name\\\"}, {\\\"LastName\\\", \\\"Last Name\\\"}}),\\n    #\\\"Inserted Merged Column\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"Full Name\\\", each Text.Combine({[First Name], [Last Name]}, \\\" \\\"), type text)\\nin\\n    #\\\"Inserted Merged Column\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Role Approval",
      "lineageTag": "46da9e14-7769-40f8-9645-fc47e5f2407b",
      "queryGroupId": "84f1b5fb-86e6-40ce-a936-518ae17cf818",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "",
        "    //Commom Variables:",
        "    CurrentDate = DateTime.LocalNow(),",
        "    CurrentYear = Date.Year(CurrentDate),",
        "    EndOfNextYearCalendar = #date (CurrentYear + 1, 12, 31),",
        "",
        "",
        "// ----------------------------------------------------------- DIRECT APPROVAL ------------------------------------------------------- //",
        "",
        "",
        "    FamilyDirect = Table.ExpandRecordColumn(",
        "        Table.ExpandRecordColumn(",
        "            Table.SelectColumns(",
        "                Source{[Name=\"FamilyRoleApprovals\",Signature=\"table\"]}[Data],",
        "                {\"FamilyId\", \"RoleName\", \"Start\", \"End\", \"Status\", \"Organization\", \"Location\"}",
        "            ),",
        "            \"Organization\", {\"Id\"}, {\"OrganizationId\"}",
        "        ),",
        "        \"Location\", {\"Id\"}, {\"LocationId\"}",
        "    ),",
        "",
        "    FamilyDirectTypes = Table.AddColumn(",
        "        Table.AddColumn(",
        "            FamilyDirect,",
        "            \"Entity Type\", each \"Family\"",
        "        ),",
        "        \"Approval Type\", each \"Direct\"",
        "    ),",
        "",
        "    FamilyDirectStatusFlag = Table.AddIndexColumn(",
        "        Table.Sort(",
        "            FamilyDirectTypes,",
        "            {{\"FamilyId\", Order.Ascending}, {\"RoleName\", Order.Ascending}, {\"Start\", Order.Ascending}}",
        "            ",
        "        ),",
        "        \"Index\", 0, 1, Int64.Type",
        "    ),",
        "",
        "    FamilyDirectPrevStatus = Table.AddColumn(",
        "        FamilyDirectStatusFlag, \"PreviousStatus\", each",
        "            try",
        "                let",
        "                    idx = [Index]-1,",
        "                    prevRow = FamilyDirectStatusFlag{idx},",
        "                    sameGroup = prevRow[FamilyId] = [FamilyId] and prevRow[RoleName] = [RoleName]",
        "                in",
        "                    if sameGroup then prevRow[Status] else null",
        "            otherwise null",
        "    ),",
        "",
        "    PersonDirect = Table.ExpandRecordColumn(",
        "        Table.ExpandRecordColumn(",
        "            Table.SelectColumns( ",
        "                Source{[Name=\"IndividualRoleApprovals\",Signature=\"table\"]}[Data],",
        "                {\"PersonId\", \"RoleName\", \"Start\", \"End\", \"Status\", \"Organization\", \"Location\"}",
        "            ),",
        "            \"Organization\", {\"Id\"}, {\"OrganizationId\"}",
        "        ),",
        "        \"Location\", {\"Id\"}, {\"LocationId\"}",
        "    ),",
        "",
        "    PersonDirectTypes = Table.AddColumn(",
        "        Table.AddColumn(",
        "            PersonDirect,",
        "            \"Entity Type\", each \"Person\"",
        "        ),",
        "        \"Approval Type\", each \"Direct\"",
        "    ),",
        "",
        "    PersonDirectStatusFlag = Table.AddIndexColumn(",
        "        Table.Sort(",
        "            PersonDirectTypes,",
        "            {{\"PersonId\", Order.Ascending}, {\"RoleName\", Order.Ascending}, {\"Start\", Order.Ascending}}",
        "            ",
        "        ),",
        "        \"Index\", 0, 1, Int64.Type",
        "    ),",
        "",
        "    PersonDirectPrevStatus = Table.AddColumn(",
        "        PersonDirectStatusFlag, \"PreviousStatus\", each",
        "            try",
        "                let",
        "                    idx = [Index]-1,",
        "                    prevRow = PersonDirectStatusFlag{idx},",
        "                    sameGroup = prevRow[PersonId] = [PersonId] and prevRow[RoleName] = [RoleName]",
        "                in",
        "                    if sameGroup then prevRow[Status] else null",
        "            otherwise null",
        "    ),",
        "",
        "// ----------------------------------------------------------- INDIRECT APPROVAL ------------------------------------------------------- //",
        "",
        "    FamilyIndirect = Table.SelectColumns( ",
        "        Source{[Name=\"IndividualRoleApprovals\",Signature=\"table\"]}[Data],",
        "        {\"PersonId\", \"RoleName\", \"\"}",
        "    ),",
        "",
        "    f_IndirectApprovedFamilies = Source{[Name=\"IndividualRoleApprovals\",Signature=\"table\"]}[Data],",
        "    f_IndirectApprovedAddType = Table.AddColumn(f_IndirectApprovedFamilies, \"Entity Type\", each \"Family\"),",
        "    f_IndirectApprovedColumns = Table.RemoveColumns(f_IndirectApprovedAddType,{\"Person\", \"Role\", \"Family\", \"PersonId\"})",
        "",
        "",
        "",
        "",
        "",
        "",
        "in",
        "    f_IndirectApprovedColumns"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let \\n    Source = #\\\"OData Live\\\" ,\\n\\n    //Commom Variables:\\n    CurrentDate = DateTime.LocalNow(),\\n    CurrentYear = Date.Year(CurrentDate),\\n    EndOfNextYearCalendar = #date (CurrentYear + 1, 12, 31),\\n\\n    //Families - Direct Approval: \\n    FamilyTable = Source{[Name=\\\"FamilyRoleApprovals\\\",Signature=\\\"table\\\"]}[Data],\\n    FamilyAddType = Table.AddColumn(FamilyTable, \\\"Entity Type\\\", each \\\"Family\\\"),\\n    FamilyColumns = Table.RemoveColumns(FamilyAddType, {\\\"Family\\\", \\\"Role\\\"}),\\n    FamilyAddColumns = Table.AddColumn(FamilyColumns, \\\"Date\\\", each\\n        if [Start] > EndOfNextYearCalendar then {}\\n        else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))),\\n    FamilyExpandDate = Table.ExpandListColumn(FamilyAddColumns, \\\"Date\\\"),\\n    FamilyFiltered = Table.SelectRows(FamilyExpandDate, each [Date] <> null and [Date] <> \\\"\\\"),\\n    FamilyDateType = Table.TransformColumnTypes(FamilyFiltered,{{\\\"Date\\\", type date}}),\\n    FamilyAdjusted = Table.RemoveColumns(FamilyDateType,{\\\"Start\\\", \\\"End\\\"}),\\n    FamilyApprovalType = Table.AddColumn(FamilyAdjusted, \\\"Approval Type\\\", each \\\"Direct\\\"),\\n    FamilyFinal = Table.RenameColumns(FamilyApprovalType, {{\\\"FamilyId\\\", \\\"EntityId\\\"}}),\\n\\n    //Person - Direct Approval: \\n    PersonTable = Source{[Name=\\\"IndividualRoleApprovals\\\",Signature=\\\"table\\\"]}[Data],\\n    PersonAddType = Table.AddColumn(PersonTable, \\\"Entity Type\\\", each \\\"Person\\\"),\\n    PersonColumns = Table.RemoveColumns(PersonAddType,{\\\"Person\\\", \\\"Role\\\", \\\"Family\\\", \\\"FamilyId\\\"}),\\n    PersonAddColumns = Table.AddColumn(PersonColumns, \\\"Date\\\", each\\n        if [Start] > EndOfNextYearCalendar then {}\\n        else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))),\\n    PersonExpandDate = Table.ExpandListColumn(PersonAddColumns, \\\"Date\\\"),\\n    PersonFiltered = Table.SelectRows(PersonExpandDate, each [Date] <> null and [Date] <> \\\"\\\"),\\n    PersonDateType = Table.TransformColumnTypes(PersonFiltered,{{\\\"Date\\\", type date}}),\\n    PersonAdjusted = Table.RemoveColumns(PersonDateType,{\\\"Start\\\", \\\"End\\\"}),\\n    PersonApprovalType = Table.AddColumn(PersonAdjusted, \\\"Approval Type\\\", each \\\"Direct\\\"),\\n    PersonFinal = Table.RenameColumns(PersonApprovalType, {{\\\"PersonId\\\", \\\"EntityId\\\"}}),\\n\\n    // Families - Indirect Approval: \\n    f_IndirectApprovedFamilies = Source{[Name=\\\"IndividualRoleApprovals\\\",Signature=\\\"table\\\"]}[Data],\\n    f_IndirectApprovedAddType = Table.AddColumn(f_IndirectApprovedFamilies, \\\"Entity Type\\\", each \\\"Family\\\"),\\n    f_IndirectApprovedColumns = Table.RemoveColumns(f_IndirectApprovedAddType,{\\\"Person\\\", \\\"Role\\\", \\\"Family\\\", \\\"PersonId\\\"}),\\n    f_IndirectApprovedAddColumns = Table.AddColumn(f_IndirectApprovedColumns, \\\"Date\\\", each\\n        if [Start] > EndOfNextYearCalendar then {}\\n        else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))),\\n    f_IndirectApprovedExpandDate = Table.ExpandListColumn(f_IndirectApprovedAddColumns, \\\"Date\\\"),\\n    f_IndirectApprovedFiltered = Table.SelectRows(f_IndirectApprovedExpandDate, each [Date] <> null and [Date] <> \\\"\\\"),\\n    f_IndirectApprovedDateType = Table.TransformColumnTypes(f_IndirectApprovedFiltered,{{\\\"Date\\\", type date}}),\\n    f_IndirectApprovedAdjusted = Table.RemoveColumns(f_IndirectApprovedDateType,{\\\"Start\\\", \\\"End\\\"}),\\n    f_IndirectApprovedApprovalType = Table.AddColumn(f_IndirectApprovedAdjusted, \\\"Approval Type\\\", each \\\"Indirect\\\"),\\n    f_IndirectApprovedFinal = Table.RenameColumns(f_IndirectApprovedApprovalType, {{\\\"FamilyId\\\", \\\"EntityId\\\"}}),\\n\\n    //Person - Indirect Approval:\\n\\n    // 1st Step: Create the Individual Removal Table - We will use this later to filter the person indirect approvals:\\n    removedIndividualTable = Source{[Name=\\\"FamilyRoleRemovedIndividuals\\\",Signature=\\\"table\\\"]}[Data],\\n    removedIndividualRemoveColumns = Table.RemoveColumns(removedIndividualTable,{\\\"Person\\\", \\\"Role\\\", \\\"Family\\\"}),\\n    removedIndividualGeneratedDates = Table.AddColumn(removedIndividualRemoveColumns, \\\"ExclusionDate\\\", each\\n        if [Start] > EndOfNextYearCalendar then {}\\n        else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))),\\n    removedIndividualExpandedDates = Table.ExpandListColumn(removedIndividualGeneratedDates, \\\"ExclusionDate\\\"),\\n    removedIndividualFiltered = Table.SelectRows(removedIndividualExpandedDates, each [ExclusionDate] <> null and [ExclusionDate] <> \\\"\\\"),\\n    removedIndividualFinal = Table.RemoveColumns(removedIndividualFiltered,{\\\"Start\\\", \\\"End\\\"}),\\n\\n    //2nd Step: Identify family approvals for person and filter out all the exclusions. \\n    AllPersonTable = Table.SelectColumns(Source{[Name=\\\"Person\\\",Signature=\\\"table\\\"]}[Data],{\\\"Id\\\", \\\"FamilyId\\\"}),\\n    AllPersonFiltered = Table.SelectColumns(Table.Join(\\n        AllPersonTable,\\n        \\\"FamilyId\\\",\\n        FamilyFinal,\\n        \\\"EntityId\\\",\\n        JoinKind.RightOuter\\n    ), {\\\"Id\\\", \\\"EntityId\\\", \\\"RoleName\\\", \\\"Status\\\", \\\"Date\\\"}),\\n\\n    AllPersonWithoutExclusions = Table.Join(\\n        AllPersonFiltered,\\n        {\\\"Id\\\", \\\"EntityId\\\", \\\"Date\\\"},\\n        Table.SelectColumns(removedIndividualFinal, {\\\"PersonId\\\", \\\"FamilyId\\\", \\\"ExclusionDate\\\"}),\\n        {\\\"PersonId\\\", \\\"FamilyId\\\", \\\"ExclusionDate\\\"},\\n        JoinKind.LeftAnti\\n    ),\\n\\n    // 3rd Step: Recreate the table structure to merge with the others:\\n    p_indirectApproved = Table.SelectColumns(AllPersonWithoutExclusions, {\\\"Id\\\", \\\"RoleName\\\", \\\"Status\\\", \\\"Date\\\"}),\\n    p_indirectApprovedRenamed = Table.RenameColumns(p_indirectApproved, {\\\"Id\\\", \\\"EntityId\\\"}),\\n    p_indirectApprovedEntityType = Table.AddColumn(p_indirectApprovedRenamed, \\\"Entity Type\\\", each \\\"Person\\\"),\\n    p_indirectApprovedFinal = Table.AddColumn(p_indirectApprovedEntityType, \\\"Approval Type\\\", each \\\"Indirect\\\"),\\n\\n    // Combined Data:\\n    CombinedTables = Table.Combine({FamilyFinal, PersonFinal, f_IndirectApprovedFinal, p_indirectApprovedFinal}),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(CombinedTables,{\\\"EntityId\\\", \\\"Entity Type\\\", \\\"RoleName\\\", \\\"Status\\\", \\\"Approval Type\\\", \\\"Date\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Reordered Columns\\\",{{\\\"EntityId\\\", \\\"Entity Id\\\"}, {\\\"RoleName\\\", \\\"Role Name\\\"}}),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Renamed Columns\\\", each true),\\n\\n    // Additional step: Status Change Flag\\n    \\n    \\n    SortedTable = Table.Sort(#\\\"Filtered Rows\\\",{{\\\"Entity Id\\\", Order.Ascending}, {\\\"Role Name\\\", Order.Ascending}, {\\\"Date\\\", Order.Ascending}}),\\n\\n    \\n    GroupedTable = Table.Group(SortedTable, {\\\"Entity Id\\\", \\\"Role Name\\\"}, {\\n        {\\\"AllData\\\", each \\n            let \\n                AddIndex = Table.AddIndexColumn(_, \\\"RowIndex\\\", 0, 1, Int64.Type),\\n                AddPreviousStatus = Table.AddColumn(AddIndex, \\\"PreviousStatus\\\", each try AddIndex{[RowIndex]-1}[Status] otherwise null),\\n                AddStatusChangeFlag = Table.AddColumn(AddPreviousStatus, \\\"StatusChanged\\\", each if [Status] <> [PreviousStatus] then 1 else 0),\\n                RemoveAuxColumns = Table.RemoveColumns(AddStatusChangeFlag, {\\\"RowIndex\\\", \\\"PreviousStatus\\\"})\\n            in \\n                RemoveAuxColumns\\n        }\\n    }),\\n\\n    \\n    ExpandedTable = Table.Combine(Table.Column(GroupedTable, \\\"AllData\\\")),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(ExpandedTable,{{\\\"StatusChanged\\\", type logical}})\\nin\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "RLS Location User",
      "lineageTag": "638c4247-a41d-43f2-9669-55b848e95b3e",
      "queryGroupId": "8fda5e71-2c65-4f2c-abf1-6a4e84341953",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"OData Live\",",
        "    LocationUserAccess_table = Source{[Name=\"LocationUserAccess\",Signature=\"table\"]}[Data]",
        "in",
        "    LocationUserAccess_table"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"OData Live\\\",\\n    LocationUserAccess_table = Source{[Name=\\\"LocationUserAccess\\\",Signature=\\\"table\\\"]}[Data]\\nin\\n    LocationUserAccess_table\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Source Queries",
      "id": "91ecdad7-24ac-4514-9813-a6b1f431692c",
      "description": ""
    },
    {
      "name": "Model Queries",
      "id": "4827ea4a-5fde-444b-8047-a978c092e918",
      "order": 1,
      "description": ""
    },
    {
      "name": "Reference Tables",
      "id": "594168a4-5350-4226-a9bb-22618ac5839d",
      "order": 2,
      "description": ""
    },
    {
      "name": "Consolidated Entities",
      "id": "84f1b5fb-86e6-40ce-a936-518ae17cf818",
      "order": 3,
      "description": "Here, we will join the people and families tables, as well as their related tables."
    },
    {
      "name": "RLS",
      "id": "8fda5e71-2c65-4f2c-abf1-6a4e84341953",
      "order": 4,
      "description": "Row Level Security Related Tables"
    }
  ],
  "culture": "pt-BR",
  "firewallEnabled": true
}