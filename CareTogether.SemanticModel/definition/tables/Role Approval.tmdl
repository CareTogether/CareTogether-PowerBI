table 'Role Approval'
	lineageTag: 46da9e14-7769-40f8-9645-fc47e5f2407b

	measure '# Approval Tracker' =
			
			VAR Tracker =
			    SWITCH(
			        TRUE(),
			
			        // Nível mais detalhado: mostrar somente se houver movimentação
			        ISINSCOPE('Role Approval'[Entity Name]),
			        VAR MaxDate = CALCULATE(
			            MAX('Role Approval'[Date]),
			            'Role Approval'[Status Flag] = TRUE()
			        )
			        RETURN IF(ISBLANK(MaxDate), BLANK(), FORMAT(MaxDate, "YYYY-MM-DD")),
			
			        // Nível intermediário: sempre mostrar
			        ISINSCOPE('Role Approval'[Role Name]),
			        FORMAT(CALCULATE(
			            DISTINCTCOUNT('Role Approval'[Entity Id]),
			            'Role Approval'[Status Flag] = TRUE()
			        ), "0"),
			
			        ISINSCOPE('Role Approval'[Entity Type]),
			        FORMAT(CALCULATE(
			            DISTINCTCOUNT('Role Approval'[Entity Id]),
			            'Role Approval'[Status Flag] = TRUE()
			        ), "0")
			    )
			
			RETURN
			    IF(ISBLANK(Tracker), BLANK(), Tracker)
		lineageTag: 590209fb-c050-4003-98c4-8671173f3212

	column Status
		dataType: string
		lineageTag: f18f85eb-7629-4b74-a64b-e1de51f329b2
		summarizeBy: none
		sourceColumn: Status

		annotation SummarizationSetBy = Automatic

	column 'Approval Type'
		dataType: string
		lineageTag: bab34ac0-c8ed-48a5-9e32-144a53b8afb1
		summarizeBy: none
		sourceColumn: Approval Type

		annotation SummarizationSetBy = Automatic

	column Date
		dataType: dateTime
		formatString: Short Date
		lineageTag: f8c87c7a-295b-4765-8dd9-23c751cb422e
		summarizeBy: none
		sourceColumn: Date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Entity Name' =
			COALESCE(
			    LOOKUPVALUE(Entity[Family Name], Entity[FamilyId], 'Role Approval'[Entity Id]),
			    LOOKUPVALUE(Entity[Full Name], Entity[PersonId], 'Role Approval'[Entity Id])
			)
		lineageTag: 33487ad4-e5c8-45c5-bdfc-261c58809382
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'Organization Id'
		dataType: string
		lineageTag: 14ef2e12-e176-40a3-aaef-2bd001fe702a
		summarizeBy: none
		sourceColumn: Organization Id

		annotation SummarizationSetBy = Automatic

	column 'Location Id'
		dataType: string
		lineageTag: 06d4f783-6005-43c8-9c3c-0ed8ad7390d0
		summarizeBy: none
		sourceColumn: Location Id

		annotation SummarizationSetBy = Automatic

	column 'Entity Id'
		dataType: string
		lineageTag: 1d84955a-36f8-4029-ae86-599a4487dad6
		summarizeBy: none
		sourceColumn: Entity Id

		annotation SummarizationSetBy = Automatic

	column 'Role Name'
		dataType: string
		lineageTag: 4cd0d772-c06f-46a6-ad22-75aabbf0d82d
		summarizeBy: none
		sourceColumn: Role Name

		annotation SummarizationSetBy = Automatic

	column 'Previous Status'
		dataType: string
		lineageTag: 9c46bfbc-2176-4f90-a660-fa287de05738
		summarizeBy: none
		sourceColumn: Previous Status

		annotation SummarizationSetBy = Automatic

	column 'Status Flag'
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 6b6f0a57-fee2-447d-9fcd-f8b409f545f3
		summarizeBy: none
		sourceColumn: Status Flag

		annotation SummarizationSetBy = Automatic

	column 'Entity Type'
		dataType: string
		lineageTag: dbc484d9-19df-4101-8cbb-4ed57e47437d
		summarizeBy: none
		sourceColumn: Entity Type

		annotation SummarizationSetBy = Automatic

	partition 'Role Approval' = m
		mode: import
		queryGroup: 'Consolidated Entities'
		source = ```
				let
				    Source = #"OData Live",
				
				    //Commom Variables:
				    CurrentDate = DateTime.LocalNow(),
				    CurrentYear = Date.Year(CurrentDate),
				    EndOfNextYearCalendar = #date (CurrentYear + 1, 12, 31),
				
				
				// ----------------------------------------------------------- DIRECT APPROVAL ------------------------------------------------------- //
				
				
				    // Families - Direct Approval: 
				    FamilyDirect = 
				        Table.AddIndexColumn(
				            Table.Sort(
				                Table.AddColumn(
				                    Table.AddColumn(
				                        Table.ExpandRecordColumn(
				                            Table.ExpandRecordColumn(
				                                Table.SelectColumns( 
				                                    Table.RenameColumns(
				                                        Source{[Name="FamilyRoleApprovals", Signature="table"]}[Data],
				                                        {{"FamilyId", "EntityId"}}
				                                    ), {"EntityId", "RoleName", "Start", "End", "Status", "Organization", "Location"}
				                                ),
				                                "Organization", {"Id"}, {"OrganizationId"}
				                            ),
				                            "Location", {"Id"}, {"LocationId"}
				                        ),
				                        "EntityType", each "Family"
				                    ),
				                    "ApprovalType", each "Direct"
				                ),
				                {{"EntityId", Order.Ascending}, {"RoleName", Order.Ascending}, {"Start", Order.Ascending}}
				            ),
				            "Index", 0, 1, Int64.Type
				        ),
				
				
				    FamilyDirectPreviousStatus = 
				    Table.AddColumn(
				        FamilyDirect, "PreviousStatus", each
				            try
				                let
				                    idx = [Index] - 1 ,
				                    prevRow = FamilyDirect{idx},
				                    sameGroup = prevRow[EntityId] = [EntityId] and prevRow[RoleName] = [RoleName]
				                in 
				                    if sameGroup then prevRow[Status] else null
				            otherwise null
				    ),
				
				    FamilyDirectStatusFlag = 
				    Table.SelectColumns(
				        Table.SelectRows(
				            Table.AddColumn(
				                Table.TransformColumnTypes(
				                    Table.ExpandListColumn(
				                        Table.AddColumn(
				                            FamilyDirectPreviousStatus, "Date", each
				                                if [Start] > EndOfNextYearCalendar then {}
				                                else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))
				                        ),
				                        "Date"
				                    ),
				                    {{"Date", type date}}
				                ),
				                "StatusFlag", each [Status] <> [PreviousStatus] and [PreviousStatus] <> null and [Date] = [Start], type logical
				            ),
				            each [Date] <> null and [Date] <> ""
				        ), {"OrganizationId", "LocationId", "EntityId", "RoleName", "PreviousStatus", "Status", "StatusFlag", "EntityType", "ApprovalType", "Date"}
				    ),
				
				
				    // Person Direct Approval: 
				    PersonDirect = 
				    Table.AddIndexColumn(
				        Table.Sort(
				            Table.AddColumn(
				                Table.AddColumn(
				                    Table.ExpandRecordColumn(
				                        Table.ExpandRecordColumn(
				                            Table.SelectColumns( 
				                                Table.RenameColumns(
				                                    Source{[Name="IndividualRoleApprovals", Signature="table"]}[Data],
				                                    {{"PersonId", "EntityId"}}
				                                ), {"EntityId", "RoleName", "Start", "End", "Status", "Organization", "Location"}
				                            ),
				                            "Organization", {"Id"}, {"OrganizationId"}
				                        ),
				                        "Location", {"Id"}, {"LocationId"}
				                    ),
				                    "EntityType", each "Person"
				                ),
				                "ApprovalType", each "Direct"
				            ),
				            {{"EntityId", Order.Ascending}, {"RoleName", Order.Ascending}, {"Start", Order.Ascending}}
				        ),
				        "Index", 0, 1, Int64.Type
				    ),
				
				    PersonDirectPreviousStatus = 
				    Table.AddColumn(
				        PersonDirect, "PreviousStatus", each
				            try
				                let
				                    idx = [Index] - 1 ,
				                    prevRow = PersonDirect{idx},
				                    sameGroup = prevRow[EntityId] = [EntityId] and prevRow[RoleName] = [RoleName]
				                in 
				                    if sameGroup then prevRow[Status] else null
				            otherwise null
				    ),
				
				    PersonDirectStatusFlag = 
				    Table.SelectColumns(
				        Table.SelectRows(
				            Table.AddColumn(
				                Table.TransformColumnTypes(
				                    Table.ExpandListColumn(
				                        Table.AddColumn(
				                            PersonDirectPreviousStatus, "Date", each
				                                if [Start] > EndOfNextYearCalendar then {}
				                                else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))
				                        ),
				                        "Date"
				                    ),
				                    {{"Date", type date}}
				                ),
				                "StatusFlag", each [Status] <> [PreviousStatus] and [PreviousStatus] <> null and [Date] = [Start], type logical
				            ),
				            each [Date] <> null and [Date] <> ""
				        ), {"OrganizationId", "LocationId", "EntityId", "RoleName", "PreviousStatus", "Status", "StatusFlag", "EntityType", "ApprovalType", "Date"}
				
				    ),
				
				// ----------------------------------------------------------- INDIRECT APPROVAL ------------------------------------------------------- //
				
				    // Families - Indirect Approval:
				    FamilyIndirect = 
				    Table.AddIndexColumn(
				        Table.Sort(
				            Table.AddColumn(
				                Table.AddColumn(
				                    Table.ExpandRecordColumn(
				                        Table.ExpandRecordColumn(
				                            Table.SelectColumns( 
				                                Table.RenameColumns(
				                                    Source{[Name="IndividualRoleApprovals", Signature="table"]}[Data],
				                                    {{"FamilyId", "EntityId"}}
				                                ), {"EntityId", "RoleName", "Start", "End", "Status", "Organization", "Location"}
				                            ),
				                            "Organization", {"Id"}, {"OrganizationId"}
				                        ),
				                        "Location", {"Id"}, {"LocationId"}
				                    ),
				                    "EntityType", each "Family"
				                ),
				                "ApprovalType", each "Indirect"
				            ),
				            {{"EntityId", Order.Ascending}, {"RoleName", Order.Ascending}, {"Start", Order.Ascending}}
				        ),
				        "Index", 0, 1, Int64.Type
				    ),
				
				    FamilyIndirectPreviousStatus = 
				    Table.AddColumn(
				        FamilyIndirect, "PreviousStatus", each
				            try
				                let
				                    idx = [Index] - 1 ,
				                    prevRow = RoleName{idx},
				                    sameGroup = prevRow[EntityId] = [EntityId] and prevRow[RoleName] = [RoleName]
				                in 
				                    if sameGroup then prevRow[Status] else null
				            otherwise null
				    ),
				
				    FamilyIndirectStatusFlag =
				    Table.SelectColumns( 
				        Table.SelectRows(
				            Table.AddColumn(
				                Table.TransformColumnTypes(
				                    Table.ExpandListColumn(
				                        Table.AddColumn(
				                            FamilyIndirectPreviousStatus, "Date", each
				                                if [Start] > EndOfNextYearCalendar then {}
				                                else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))
				                        ),
				                        "Date"
				                    ),
				                    {{"Date", type date}}
				                ),
				                "StatusFlag", each [Status] <> [PreviousStatus] and [PreviousStatus] <> null and [Date] = [Start], type logical
				            ),
				            each [Date] <> null and [Date] <> ""
				        ), {"OrganizationId", "LocationId", "EntityId", "RoleName", "PreviousStatus", "Status", "StatusFlag", "EntityType", "ApprovalType", "Date"}
				    ),
				
				    // Person - Indirect Approval:
				
				    // 1st step: Create the Individual Removal Table - it will be used later to filter the individuals indirectly approved:
				    removedIndividual = 
				    Table.RemoveColumns(
				        Table.SelectRows(
				            Table.ExpandListColumn(
				                Table.AddColumn(
				                    Table.SelectColumns(
				                        Source{[Name="FamilyRoleRemovedIndividuals", Signature="table"]}[Data],
				                        {"PersonId", "RoleName", "FamilyId", "Start", "End"}
				                    ),
				                    "ExclusionDate", each
				                        if [Start] > EndOfNextYearCalendar then {}
				                        else List.Dates([Start], Duration.Days(List.Min({[End], EndOfNextYearCalendar}) - [Start]) + 1, #duration(1,0,0,0))
				                ), "ExclusionDate"
				            ),
				            each [ExclusionDate] <> null and [ExclusionDate] <> ""
				        ), {"Start", "End"}
				    ),
				
				    // 2nd step: Identify family approvals for person and filter out all the exclusions
				    AllPerson = 
				        Table.SelectColumns(
				            Source{[Name="Person", Signature="table"]}[Data],
				            {"Id", "FamilyId"}
				        ),
				
				    AllPersonFiltered = 
				    Table.SelectColumns(
				        Table.Join(
				            AllPerson,
				            "FamilyId",
				            FamilyDirectStatusFlag,
				            "EntityId",
				            JoinKind.RightOuter
				        ),
				        {"OrganizationId", "LocationId", "Id", "EntityId", "RoleName", "PreviousStatus", "Status", "StatusFlag", "Date"}
				    ),
				
				    AllPersonWithoutExclusions = 
				    Table.Join(
				        AllPersonFiltered,
				        {"Id", "EntityId", "Date"},
				        Table.SelectColumns(removedIndividual, {"PersonId", "FamilyId", "ExclusionDate"}),
				        {"PersonId", "FamilyId", "ExclusionDate"},
				        JoinKind.LeftAnti
				    ),
				
				    // 3rd Step: Recreate the table structure to merge with the others:
				    AllPersonEnhanced =
				    Table.AddColumn(
				        Table.AddColumn(
				            Table.RenameColumns(
				                Table.SelectColumns(
				                    AllPersonWithoutExclusions, 
				                    {"OrganizationId", "LocationId", "Id", "RoleName", "PreviousStatus", "Status", "StatusFlag", "Date"}
				                ),
				                {{"Id", "EntityId"}}
				            ),
				            "EntityType", each "Person"
				        ),
				        "ApprovalType", each "Indirect"
				    ),
				
				// ----------------------------------------------------------- COMBINED DATA  ------------------------------------------------------- // 
				
				CombinedTables = 
				Table.RenameColumns(
				    Table.Combine(
				        {FamilyDirectStatusFlag, PersonDirectStatusFlag, FamilyIndirectStatusFlag, AllPersonEnhanced}
				    ),
				    {{"OrganizationId", "Organization Id"}, {"LocationId", "Location Id"}, {"RoleName", "Role Name"}, {"PreviousStatus","Previous Status"}, {"StatusFlag", "Status Flag"}, {"EntityId", "Entity Id"}, {"EntityType", "Entity Type"},{"ApprovalType", "Approval Type"}}
				)
				
				
				in
				    CombinedTables
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

